datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  meals         Meal[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Food {
  barCode       BigInt    @id @default(autoincrement())
  createdAt     DateTime? @default(now())
  name          String    @default("")
  fat           Float     @default(0)
  carbohydrates Float     @default(0)
  protein       Float     @default(0)
  fibre         Float     @default(0)
  saturatedFat  Float     @default(0)
  salt          Float     @default(0)
  sugar         Float     @default(0)
  meals         Meal[]
}

model Meal {
  mealId    BigInt    @id @default(autoincrement())
  userId    String
  barCode   BigInt
  createdAt DateTime? @default(now())
  grams     Int       @db.SmallInt
  type      String    @db.VarChar
  food      Food      @relation(fields: [barCode], references: [barCode])
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
