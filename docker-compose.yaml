services:
  foodtracker:
    restart: unless-stopped
    depends_on:
      foodtrackerdb:
        condition: service_healthy
    build:
      context: .
      dockerfile: Dockerfile
      args:
        DATABASE_URL: ${DATABASE_URL}
        AUTH_SECRET: ${AUTH_SECRET}
        AUTH_KEYCLOAK_ID: ${AUTH_KEYCLOAK_ID}
        AUTH_KEYCLOAK_SECRET: ${AUTH_KEYCLOAK_SECRET}
        AUTH_KEYCLOAK_ISSUER: ${AUTH_KEYCLOAK_ISSUER}
    labels:
      - traefik.enable=true
      - traefik.http.services.food-tracker.loadbalancer.server.port=3000
      - traefik.http.routers.food-tracker.rule=Host("tracker.${HOSTNAME}")
      - traefik.http.routers.food-tracker.tls=true
      - traefik.http.routers.food-tracker.entrypoints=websecure
      - traefik.http.routers.food-tracker.middlewares=compressor@docker
      - traefik.docker.network=traefik
    networks:
      traefik:
      foodtracker:
  foodtrackerdb:
    image: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: foodtracker
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    volumes:
      - foodtrackerdb:/data/postgres -U postgres
    networks:
      foodtracker:
    healthcheck:
      test: su - postgres -c pg_isready
      interval: 5s
      timeout: 10s
      retries: 120
      # Postgresdb administration system
      # pgadmin:
      #   image: dpage/pgadmin4
      #   environment:
      #     PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      #     PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      #   volumes:
      #     - pgadmin:/var/lib/pgadmin
      #   networks:
      #     traefik:
      #     foodtracker:
      #   restart: unless-stopped
      #   labels:
      #     - traefik.enable=true
      #     - traefik.http.routers.pgadmin.rule=Host("pgadmin.localhost")
      #     - traefik.docker.network=traefik
volumes:
  foodtrackerdb:
  pgadmin:
networks:
  traefik:
    external: true
    name: traefik
  foodtracker:
